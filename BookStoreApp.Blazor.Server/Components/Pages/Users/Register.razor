@page "/users/register"
@inject IBookStoreServiceClient clientService
@inject NavigationManager navigationManager
@using BookStoreApp.Blazor.Server.Services.Base
<h3>Register New Account</h3>

@if(!string.IsNullOrEmpty(message))
{
    <div class="alert alert-danger" role="alert">
        @message
    </div>
}

<div class="card-body col-3">
    <EditForm Model="_registrationModel" OnValidSubmit="HandleRegistration" FormName="Registration">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div class="form-group">
            <label for="email">Email Address</label>
            <InputText id="UserNme" class="form-control" @bind-Value="_registrationModel.UserName" />
            <ValidationMessage For="@(() => _registrationModel.UserName)" />
        </div>
        <div class="form-group">
            <label for="email">First Name</label>
            <InputText id="FirstName" class="form-control" @bind-Value="_registrationModel.FirstName" />
            <ValidationMessage For="@(() => _registrationModel.FirstName)" />
        </div>
        <div class="form-group">
            <label for="email">Last Name</label>
            <InputText id="LastName" class="form-control" @bind-Value="_registrationModel.LastName" />
            <ValidationMessage For="@(() => _registrationModel.LastName)" />
        </div>
        <div class="form-group">
            <label for="email">Password</label>
            <InputText id="Password" class="form-control" @bind-Value="_registrationModel.Password" type="password" />
            <ValidationMessage For="@(() => _registrationModel.Password)" />
        </div> 
        <button type="submit" class="btn btn-primary btn-block">Register</button>
    </EditForm>
</div>

@code {
    [SupplyParameterFromForm]
    UserRegisterDto? _registrationModel { get; set; }
    protected override void OnInitialized() => _registrationModel ??= new UserRegisterDto()
        {
            Role = "User"
        };

    string message = string.Empty;
    private async Task HandleRegistration()
    {
        try
        {
            await clientService.RegisterAsync(_registrationModel);
            navigationManager.NavigateTo("/users/login");
        }
        catch (ApiException e)
        {
            message = e.Message;
        }
    }

}
